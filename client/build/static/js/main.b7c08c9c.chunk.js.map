{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","owner","status","accounts","contract","proposals","winner","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","getPastEvents","proposalsEvt","methods","call","setState","runExample","alert","error","workflowStatus","updateWinner","addVoter","voterAdress","document","getElementById","value","send","from","addProposal","proposalDescrition","setVote","tallyVotes","updateStatus","winningProposalID","winnerId","getOneProposal","winnerProposal","description","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","this","voterRegistration","type","id","onClick","className","map","proposal","index","key","returnValues","proposalDescription","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7c08c9c.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { owner: null, status: 0, web3: null, accounts: null, contract: null, proposals: null, winner: null };\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // getting the events  \n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const proposalsEvt = await instance.getPastEvents('ProposalRegistered', options);\n\n      const owner = await instance.methods.owner().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ owner, web3, accounts, contract: instance, proposals: proposalsEvt }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    const status = await contract.methods.workflowStatus().call();\n    // Update state with the result.\n    this.setState({ status: status });\n\n    if (this.state.status == 5) {\n      this.updateWinner();\n    }\n   \n    // getting the events  \n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n    const proposalsEvt = await contract.getPastEvents('ProposalRegistered', options);\n\n    this.setState({ proposals:proposalsEvt });\n    \n  };\n\n  // Ajouter un Votant\n  addVoter = async () => {\n    const { accounts, contract} = this.state;\n    let voterAdress = document.getElementById(\"voterAdress\").value;\n    await contract.methods.addVoter(voterAdress).send({ from: accounts[0] });\n    document.getElementById(\"voterAdress\").value = \"\";\n  };\n\n  // Ajouter une propositions\n  addProposal = async () => {\n    const { accounts, contract} = this.state;\n    let proposalDescrition = document.getElementById(\"proposalDescrition\").value;\n    await contract.methods.addProposal(proposalDescrition).send({ from: accounts[0] });\n    document.getElementById(\"proposalDescrition\").value = \"\";\n  };\n\n  // Ajouter une propositions\n  setVote = async () => {\n      const { accounts, contract} = this.state;\n      //FIXME get the proposal checkedId\n      let proposalId = 1;\n      await contract.methods.setVote(proposalId).send({ from: accounts[0] });\n  };\n\n  // Comptabiliser les votes\n  tallyVotes = async () => {\n      const { accounts, contract} = this.state;\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n      this.updateStatus();\n      this.updateWinner();\n  };\n\n  updateStatus = async () => {\n    const { contract} = this.state;\n    const status = await contract.methods.workflowStatus().call();\n    // Update state with the result.\n    this.setState({ status: status });\n  }\n\n  updateWinner = async () => {\n    const {contract} = this.state;\n    \n      const winnerId = await contract.methods.winningProposalID().call();\n      console.log(winnerId);\n      try {\n        const winnerProposal = await contract.methods.getOneProposal(winnerId).call();\n        console.log(winnerProposal.description);\n        this.setState({ winner: '#' + winnerId + ' ' + winnerProposal.description });\n      } catch (error) {\n        this.setState({ winner: '' });\n      }\n    \n  }\n\n  // Démarrer l'enregistrement des propositions\n  startProposalsRegistering = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n  \n  endProposalsRegistering = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  startVotingSession = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.startVotingSession().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  endVotingSession = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.endVotingSession().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const isOwner = () => {\n      console.log('owner: ' + this.state.owner);\n      console.log('account0: ' + this.state.accounts[0]);\n      return this.state.accounts[0] == this.state.owner;\n    }\n\n    let voterRegistration;\n    let endProposalsRegistering;\n    let startVotingSession;\n    let endVotingSession;\n    let tallyVotes;\n\n    if ( isOwner() ) {\n      voterRegistration = \n      <div>\n        <div>\n          <h3>Ajouter un votant</h3>\n          Entrer l'adresse du votant<input type=\"text\" id=\"voterAdress\" />\n          <button onClick={this.addVoter}>Valider</button>\n        </div>\n        <br/>\n        <div><button onClick={this.startProposalsRegistering}> Démarrer l'enregitrement des Propositions</button></div> \n      </div>;\n      endProposalsRegistering = <div><button onClick={this.endProposalsRegistering}> Arrêter l'enregitrement des Propositions</button></div> ;\n\n      startVotingSession = <div><button onClick={this.startVotingSession}> Démarrer la session de vote</button></div> ;\n\n      endVotingSession = <div><button onClick={this.endVotingSession}> Arrêter la session de vote</button></div> ;\n\n      tallyVotes = <div><button onClick={this.tallyVotes}> Comptabiliser les votes</button></div> ;\n    } \n\n    return (\n      <div className=\"App\">\n        \n        <h2>Système de  Vote</h2>\n        \n        <p>adresse: {this.state.accounts[0]}</p>\n        \n        <div>WorkflowStatus: {this.state.status}</div>\n       \n       {voterRegistration}\n        \n        <div>\n          <h3>Enregistrer une Proposition</h3>\n          Entrer la Proposition<input type=\"text\" id=\"proposalDescrition\" />\n          <button onClick={this.addProposal}>Valider</button>\n        </div>\n\n        <br />\n        {endProposalsRegistering}\n        <br />\n        {startVotingSession}\n\n        <div>\n          <h3>Voter une proposition</h3>\n          {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <ul>\n              { this.state.proposals.map( (proposal, index) => (\n                <div key={index}>\n                  <span>{'#' + index + '  ' + proposal.returnValues.proposalDescription}</span>\n\n                  <input value={index} type=\"checkbox\" />\n                </div>\n               ) ) }\n            </ul>\n         }\n          <button onClick={this.setVote}>Voter</button>\n        </div>\n        \n        <br />\n        {endVotingSession}\n\n        <div>\n\n        <br />\n        {tallyVotes}\n        <br/>\n        <div><span>Le gagnant est: {this.state.winner}</span></div>\n        </div>\n  \n\n        {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <ul>\n              { this.state.proposals.map( (proposal) => ( <li>{proposal.returnValues.proposalDescription}</li> ) ) }\n            </ul>\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}