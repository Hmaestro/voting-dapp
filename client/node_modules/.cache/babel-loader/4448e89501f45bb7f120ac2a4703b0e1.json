{"ast":null,"code":"var _jsxFileName = \"/Users/Hoby/workspace/GITHUB/voting-dapp/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      statusMap: null,\n      owner: null,\n      status: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      proposals: null,\n      winner: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(VotingContract.abi, deployedNetwork && deployedNetwork.address); // getting the events  \n\n        let options = {\n          fromBlock: 0,\n          //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const proposalsEvt = await instance.getPastEvents('ProposalRegistered', options);\n        const owner = await instance.methods.owner().call();\n        const statusMap = new Map();\n        statusMap.set('0', 'Enregitrement des votants');\n        statusMap.set('1', 'Enregitrement des propositions');\n        statusMap.set('2', \"Fin de l'enregitrement des propositions\");\n        statusMap.set('3', 'Session de vote');\n        statusMap.set('4', 'Fin de la session de vote');\n        statusMap.set('5', 'RÃ©sultat de vote'); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          statusMap,\n          owner,\n          web3,\n          accounts,\n          contract: instance,\n          proposals: proposalsEvt\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract;\n      const status = await contract.methods.workflowStatus().call(); // Update state with the result.\n\n      this.setState({\n        status: status\n      });\n\n      if (this.state.status == 5) {\n        this.updateWinner();\n      } // getting the events  \n\n\n      let options = {\n        fromBlock: 0,\n        //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const proposalsEvt = await contract.getPastEvents('ProposalRegistered', options);\n      this.setState({\n        proposals: proposalsEvt\n      });\n    };\n\n    this.addVoter = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract;\n      let voterAdress = document.getElementById(\"voterAdress\").value;\n      await contract.methods.addVoter(voterAdress).send({\n        from: accounts[0]\n      });\n      document.getElementById(\"voterAdress\").value = \"\";\n    };\n\n    this.addProposal = async () => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract;\n      let proposalDescrition = document.getElementById(\"proposalDescrition\").value;\n      await contract.methods.addProposal(proposalDescrition).send({\n        from: accounts[0]\n      });\n      document.getElementById(\"proposalDescrition\").value = \"\";\n    };\n\n    this.setVote = async () => {\n      const _this$state4 = this.state,\n            accounts = _this$state4.accounts,\n            contract = _this$state4.contract; //FIXME get the proposal checkedId\n\n      let proposalId = 1;\n      await contract.methods.setVote(proposalId).send({\n        from: accounts[0]\n      });\n    };\n\n    this.tallyVotes = async () => {\n      const _this$state5 = this.state,\n            accounts = _this$state5.accounts,\n            contract = _this$state5.contract;\n      await contract.methods.tallyVotes().send({\n        from: accounts[0]\n      });\n      this.updateStatus();\n      this.updateWinner();\n    };\n\n    this.updateStatus = async () => {\n      const contract = this.state.contract;\n      const status = await contract.methods.workflowStatus().call(); // Update state with the result.\n\n      this.setState({\n        status: status\n      });\n    };\n\n    this.updateWinner = async () => {\n      const contract = this.state.contract;\n      const winnerId = await contract.methods.winningProposalID().call();\n      console.log(winnerId);\n\n      try {\n        const winnerProposal = await contract.methods.getOneProposal(winnerId).call();\n        console.log(winnerProposal.description);\n        this.setState({\n          winner: '#' + winnerId + ' ' + winnerProposal.description\n        });\n      } catch (error) {\n        this.setState({\n          winner: ''\n        });\n      }\n    };\n\n    this.startProposalsRegistering = async () => {\n      const _this$state6 = this.state,\n            accounts = _this$state6.accounts,\n            contract = _this$state6.contract;\n      await contract.methods.startProposalsRegistering().send({\n        from: accounts[0]\n      });\n      this.updateStatus();\n    };\n\n    this.endProposalsRegistering = async () => {\n      const _this$state7 = this.state,\n            accounts = _this$state7.accounts,\n            contract = _this$state7.contract;\n      await contract.methods.endProposalsRegistering().send({\n        from: accounts[0]\n      });\n      this.updateStatus();\n    };\n\n    this.startVotingSession = async () => {\n      const _this$state8 = this.state,\n            accounts = _this$state8.accounts,\n            contract = _this$state8.contract;\n      await contract.methods.startVotingSession().send({\n        from: accounts[0]\n      });\n      this.updateStatus();\n    };\n\n    this.endVotingSession = async () => {\n      const _this$state9 = this.state,\n            accounts = _this$state9.accounts,\n            contract = _this$state9.contract;\n      await contract.methods.endVotingSession().send({\n        from: accounts[0]\n      });\n      this.updateStatus();\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    const isOwner = () => {\n      console.log('owner: ' + this.state.owner);\n      console.log('account0: ' + this.state.accounts[0]);\n      return this.state.accounts[0] == this.state.owner;\n    };\n\n    let voterRegistration;\n    let endProposalsRegistering;\n    let startVotingSession;\n    let endVotingSession;\n    let tallyVotes;\n    let addProposal; // Afficahge voterRegistration\n\n    if (isOwner() && this.state.status == 0) {\n      voterRegistration = React.createElement(\"div\", {\n        id: \"voter-reg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Ajouter un votant\"), \"Entrer l'adresse du votant\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"voterAdress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addVoter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Valider\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.startProposalsRegistering,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \" D\\xE9marrer l'enregitrement des Propositions\")));\n    } // affichage Enregistrer une Proposition\n\n\n    if (this.state.status == 1) {\n      addProposal = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Enregistrer une Proposition\"), \"Entrer la Proposition\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"proposalDescrition\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addProposal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Valider\"));\n    }\n\n    if (isOwner()) {\n      endProposalsRegistering = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.endProposalsRegistering,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \" Arr\\xEAter l'enregitrement des Propositions\"));\n      startVotingSession = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.startVotingSession,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \" D\\xE9marrer la session de vote\"));\n      endVotingSession = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.endVotingSession,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \" Arr\\xEAter la session de vote\"));\n      tallyVotes = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.tallyVotes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \" Comptabiliser les votes\"));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Syst\\xE8me de  Vote\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Utilisateur: \", this.state.accounts[0]), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Etape: \", this.state.statusMap.get(this.state.status)), voterRegistration, addProposal, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), endProposalsRegistering, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), startVotingSession, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Voter une proposition\"), this.state.proposals == null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Pas de propositions\") : React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.state.proposals.map((proposal, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, '#' + index + '  ' + proposal.returnValues.proposalDescription), React.createElement(\"input\", {\n      value: index,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    })))), React.createElement(\"button\", {\n      onClick: this.setVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Voter\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), endVotingSession, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), tallyVotes, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Le gagnant est: \", this.state.winner))), this.state.proposals == null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Pas de propositions\") : React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, this.state.proposals.map(proposal => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, proposal.returnValues.proposalDescription))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Hoby/workspace/GITHUB/voting-dapp/client/src/App.js"],"names":["React","Component","VotingContract","getWeb3","App","state","statusMap","owner","status","web3","accounts","contract","proposals","winner","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","options","fromBlock","toBlock","proposalsEvt","getPastEvents","methods","call","Map","set","setState","runExample","error","alert","console","workflowStatus","updateWinner","addVoter","voterAdress","document","getElementById","value","send","from","addProposal","proposalDescrition","setVote","proposalId","tallyVotes","updateStatus","winnerId","winningProposalID","log","winnerProposal","getOneProposal","description","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","render","isOwner","voterRegistration","get","map","proposal","index","returnValues","proposalDescription"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AAAEC,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,KAAK,EAAE,IAA1B;AAAgCC,MAAAA,MAAM,EAAE,CAAxC;AAA2CC,MAAAA,IAAI,EAAE,IAAjD;AAAuDC,MAAAA,QAAQ,EAAE,IAAjE;AAAuEC,MAAAA,QAAQ,EAAE,IAAjF;AAAuFC,MAAAA,SAAS,EAAE,IAAlG;AAAwGC,MAAAA,MAAM,EAAE;AAAhH,KADkB;;AAAA,SAI1BC,iBAJ0B,GAIN,YAAY;AAC9B,UAAI;AACF;AACA,cAAML,IAAI,GAAG,MAAMN,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMO,QAAQ,GAAG,MAAMD,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMC,SAAS,GAAG,MAAMR,IAAI,CAACM,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGlB,cAAc,CAACmB,QAAf,CAAwBJ,SAAxB,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACM,GAAL,CAASQ,QAAb,CACfrB,cAAc,CAACsB,GADA,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAVE,CAeF;;AACA,YAAIC,OAAO,GAAG;AACZC,UAAAA,SAAS,EAAE,CADC;AACmB;AAC/BC,UAAAA,OAAO,EAAE;AAFG,SAAd;AAIA,cAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,aAAT,CAAuB,oBAAvB,EAA6CJ,OAA7C,CAA3B;AAEA,cAAMnB,KAAK,GAAG,MAAMe,QAAQ,CAACS,OAAT,CAAiBxB,KAAjB,GAAyByB,IAAzB,EAApB;AAEA,cAAM1B,SAAS,GAAG,IAAI2B,GAAJ,EAAlB;AACA3B,QAAAA,SAAS,CAAC4B,GAAV,CAAc,GAAd,EAAmB,2BAAnB;AACA5B,QAAAA,SAAS,CAAC4B,GAAV,CAAc,GAAd,EAAmB,gCAAnB;AACA5B,QAAAA,SAAS,CAAC4B,GAAV,CAAc,GAAd,EAAmB,yCAAnB;AACA5B,QAAAA,SAAS,CAAC4B,GAAV,CAAc,GAAd,EAAmB,iBAAnB;AACA5B,QAAAA,SAAS,CAAC4B,GAAV,CAAc,GAAd,EAAmB,2BAAnB;AACA5B,QAAAA,SAAS,CAAC4B,GAAV,CAAc,GAAd,EAAmB,kBAAnB,EA9BE,CAgCF;AACA;;AACA,aAAKC,QAAL,CAAc;AAAE7B,UAAAA,SAAF;AAAaC,UAAAA,KAAb;AAAoBE,UAAAA,IAApB;AAA0BC,UAAAA,QAA1B;AAAoCC,UAAAA,QAAQ,EAAEW,QAA9C;AAAwDV,UAAAA,SAAS,EAAEiB;AAAnE,SAAd,EAAiG,KAAKO,UAAtG;AACD,OAnCD,CAmCE,OAAOC,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KA/CyB;;AAAA,SAiD1BD,UAjD0B,GAiDb,YAAY;AAAA,0BACQ,KAAK/B,KADb;AAAA,YACfK,QADe,eACfA,QADe;AAAA,YACLC,QADK,eACLA,QADK;AAGvB,YAAMH,MAAM,GAAG,MAAMG,QAAQ,CAACoB,OAAT,CAAiBS,cAAjB,GAAkCR,IAAlC,EAArB,CAHuB,CAIvB;;AACA,WAAKG,QAAL,CAAc;AAAE3B,QAAAA,MAAM,EAAEA;AAAV,OAAd;;AACA,UAAI,KAAKH,KAAL,CAAWG,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,aAAKiC,YAAL;AACD,OARsB,CAUvB;;;AACA,UAAIf,OAAO,GAAG;AACZC,QAAAA,SAAS,EAAE,CADC;AACmB;AAC/BC,QAAAA,OAAO,EAAE;AAFG,OAAd;AAIA,YAAMC,YAAY,GAAG,MAAMlB,QAAQ,CAACmB,aAAT,CAAuB,oBAAvB,EAA6CJ,OAA7C,CAA3B;AAEA,WAAKS,QAAL,CAAc;AAAEvB,QAAAA,SAAS,EAACiB;AAAZ,OAAd;AAED,KApEyB;;AAAA,SAuE1Ba,QAvE0B,GAuEf,YAAY;AAAA,2BACS,KAAKrC,KADd;AAAA,YACbK,QADa,gBACbA,QADa;AAAA,YACHC,QADG,gBACHA,QADG;AAErB,UAAIgC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAzD;AACA,YAAMnC,QAAQ,CAACoB,OAAT,CAAiBW,QAAjB,CAA0BC,WAA1B,EAAuCI,IAAvC,CAA4C;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAA5C,CAAN;AACAkC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,GAA+C,EAA/C;AACD,KA5EyB;;AAAA,SA+E1BG,WA/E0B,GA+EZ,YAAY;AAAA,2BACM,KAAK5C,KADX;AAAA,YAChBK,QADgB,gBAChBA,QADgB;AAAA,YACNC,QADM,gBACNA,QADM;AAExB,UAAIuC,kBAAkB,GAAGN,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CC,KAAvE;AACA,YAAMnC,QAAQ,CAACoB,OAAT,CAAiBkB,WAAjB,CAA6BC,kBAA7B,EAAiDH,IAAjD,CAAsD;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAAtD,CAAN;AACAkC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CC,KAA9C,GAAsD,EAAtD;AACD,KApFyB;;AAAA,SAuF1BK,OAvF0B,GAuFhB,YAAY;AAAA,2BACY,KAAK9C,KADjB;AAAA,YACVK,QADU,gBACVA,QADU;AAAA,YACAC,QADA,gBACAA,QADA,EAElB;;AACA,UAAIyC,UAAU,GAAG,CAAjB;AACA,YAAMzC,QAAQ,CAACoB,OAAT,CAAiBoB,OAAjB,CAAyBC,UAAzB,EAAqCL,IAArC,CAA0C;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAA1C,CAAN;AACH,KA5FyB;;AAAA,SA+F1B2C,UA/F0B,GA+Fb,YAAY;AAAA,2BACS,KAAKhD,KADd;AAAA,YACbK,QADa,gBACbA,QADa;AAAA,YACHC,QADG,gBACHA,QADG;AAErB,YAAMA,QAAQ,CAACoB,OAAT,CAAiBsB,UAAjB,GAA8BN,IAA9B,CAAmC;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAAnC,CAAN;AACA,WAAK4C,YAAL;AACA,WAAKb,YAAL;AACH,KApGyB;;AAAA,SAsG1Ba,YAtG0B,GAsGX,YAAY;AAAA,YACjB3C,QADiB,GACL,KAAKN,KADA,CACjBM,QADiB;AAEzB,YAAMH,MAAM,GAAG,MAAMG,QAAQ,CAACoB,OAAT,CAAiBS,cAAjB,GAAkCR,IAAlC,EAArB,CAFyB,CAGzB;;AACA,WAAKG,QAAL,CAAc;AAAE3B,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACD,KA3GyB;;AAAA,SA6G1BiC,YA7G0B,GA6GX,YAAY;AAAA,YAClB9B,QADkB,GACN,KAAKN,KADC,CAClBM,QADkB;AAGvB,YAAM4C,QAAQ,GAAG,MAAM5C,QAAQ,CAACoB,OAAT,CAAiByB,iBAAjB,GAAqCxB,IAArC,EAAvB;AACAO,MAAAA,OAAO,CAACkB,GAAR,CAAYF,QAAZ;;AACA,UAAI;AACF,cAAMG,cAAc,GAAG,MAAM/C,QAAQ,CAACoB,OAAT,CAAiB4B,cAAjB,CAAgCJ,QAAhC,EAA0CvB,IAA1C,EAA7B;AACAO,QAAAA,OAAO,CAACkB,GAAR,CAAYC,cAAc,CAACE,WAA3B;AACA,aAAKzB,QAAL,CAAc;AAAEtB,UAAAA,MAAM,EAAE,MAAM0C,QAAN,GAAiB,GAAjB,GAAuBG,cAAc,CAACE;AAAhD,SAAd;AACD,OAJD,CAIE,OAAOvB,KAAP,EAAc;AACd,aAAKF,QAAL,CAAc;AAAEtB,UAAAA,MAAM,EAAE;AAAV,SAAd;AACD;AAEJ,KA1HyB;;AAAA,SA6H1BgD,yBA7H0B,GA6HE,YAAY;AAAA,2BACR,KAAKxD,KADG;AAAA,YAC9BK,QAD8B,gBAC9BA,QAD8B;AAAA,YACpBC,QADoB,gBACpBA,QADoB;AAEtC,YAAMA,QAAQ,CAACoB,OAAT,CAAiB8B,yBAAjB,GAA6Cd,IAA7C,CAAkD;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAAlD,CAAN;AACA,WAAK4C,YAAL;AACD,KAjIyB;;AAAA,SAmI1BQ,uBAnI0B,GAmIA,YAAY;AAAA,2BACN,KAAKzD,KADC;AAAA,YAC5BK,QAD4B,gBAC5BA,QAD4B;AAAA,YAClBC,QADkB,gBAClBA,QADkB;AAEpC,YAAMA,QAAQ,CAACoB,OAAT,CAAiB+B,uBAAjB,GAA2Cf,IAA3C,CAAgD;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAAhD,CAAN;AACA,WAAK4C,YAAL;AACD,KAvIyB;;AAAA,SAyI1BS,kBAzI0B,GAyIL,YAAY;AAAA,2BACD,KAAK1D,KADJ;AAAA,YACvBK,QADuB,gBACvBA,QADuB;AAAA,YACbC,QADa,gBACbA,QADa;AAE/B,YAAMA,QAAQ,CAACoB,OAAT,CAAiBgC,kBAAjB,GAAsChB,IAAtC,CAA2C;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAA3C,CAAN;AACA,WAAK4C,YAAL;AACD,KA7IyB;;AAAA,SA+I1BU,gBA/I0B,GA+IP,YAAY;AAAA,2BACC,KAAK3D,KADN;AAAA,YACrBK,QADqB,gBACrBA,QADqB;AAAA,YACXC,QADW,gBACXA,QADW;AAE7B,YAAMA,QAAQ,CAACoB,OAAT,CAAiBiC,gBAAjB,GAAoCjB,IAApC,CAAyC;AAAEC,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD;AAAhB,OAAzC,CAAN;AACA,WAAK4C,YAAL;AACD,KAnJyB;AAAA;;AAqJ1BW,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAK5D,KAAL,CAAWI,IAAhB,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AAED,UAAMyD,OAAO,GAAG,MAAM;AACpB3B,MAAAA,OAAO,CAACkB,GAAR,CAAY,YAAY,KAAKpD,KAAL,CAAWE,KAAnC;AACAgC,MAAAA,OAAO,CAACkB,GAAR,CAAY,eAAe,KAAKpD,KAAL,CAAWK,QAAX,CAAoB,CAApB,CAA3B;AACA,aAAO,KAAKL,KAAL,CAAWK,QAAX,CAAoB,CAApB,KAA0B,KAAKL,KAAL,CAAWE,KAA5C;AACD,KAJD;;AAMA,QAAI4D,iBAAJ;AACA,QAAIL,uBAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,gBAAJ;AACA,QAAIX,UAAJ;AACA,QAAIJ,WAAJ,CAhBO,CAkBP;;AACA,QAAIiB,OAAO,MAAM,KAAK7D,KAAL,CAAWG,MAAX,IAAqB,CAAtC,EAAyC;AACvC2D,MAAAA,iBAAiB,GACjB;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,gCAE4B;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAF5B,EAGE;AAAQ,QAAA,OAAO,EAAE,KAAKzB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAQ,QAAA,OAAO,EAAE,KAAKmB,yBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAL,CAPF,CADA;AAUD,KA9BM,CAgCP;;;AACA,QAAI,KAAKxD,KAAL,CAAWG,MAAX,IAAqB,CAAzB,EAA4B;AAC1ByC,MAAAA,WAAW,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,2BAEuB;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFvB,EAGE;AAAQ,QAAA,OAAO,EAAE,KAAKA,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,CADA;AAMD;;AAED,QAAKiB,OAAO,EAAZ,EAAiB;AAGfJ,MAAAA,uBAAuB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAQ,QAAA,OAAO,EAAE,KAAKA,uBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAL,CAA1B;AAEAC,MAAAA,kBAAkB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAQ,QAAA,OAAO,EAAE,KAAKA,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAL,CAArB;AAEAC,MAAAA,gBAAgB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAQ,QAAA,OAAO,EAAE,KAAKA,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAL,CAAnB;AAEAX,MAAAA,UAAU,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAQ,QAAA,OAAO,EAAE,KAAKA,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAL,CAAb;AACD;;AAID,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiB,KAAKhD,KAAL,CAAWK,QAAX,CAAoB,CAApB,CAAjB,CAJF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAa,KAAKL,KAAL,CAAWC,SAAX,CAAqB8D,GAArB,CAAyB,KAAK/D,KAAL,CAAWG,MAApC,CAAb,CANF,EAQE2D,iBARF,EAUElB,WAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAYEa,uBAZF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAcGC,kBAdH,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAGE,KAAK1D,KAAL,CAAWO,SAAX,IAAwB,IAAxB,GAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA/B,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKP,KAAL,CAAWO,SAAX,CAAqByD,GAArB,CAA0B,CAACC,QAAD,EAAWC,KAAX,KAC1B;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,MAAMA,KAAN,GAAc,IAAd,GAAqBD,QAAQ,CAACE,YAAT,CAAsBC,mBAAlD,CADF,EAGE;AAAO,MAAA,KAAK,EAAEF,KAAd;AAAqB,MAAA,IAAI,EAAC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADA,CADJ,CAJJ,EAcE;AAAQ,MAAA,OAAO,EAAE,KAAKpB,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAdF,CAhBF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCF,EAkCGa,gBAlCH,EAoCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGCX,UAHD,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,KAAKhD,KAAL,CAAWQ,MAAlC,CAAL,CALA,CApCF,EA8CI,KAAKR,KAAL,CAAWO,SAAX,IAAwB,IAAxB,GAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA/B,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKP,KAAL,CAAWO,SAAX,CAAqByD,GAArB,CAA2BC,QAAD,IAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,QAAQ,CAACE,YAAT,CAAsBC,mBAA3B,CAA1C,CADJ,CA/CN,CADF;AAuDD;;AApQyB;;AAuQ5B,eAAerE,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { statusMap: null, owner: null, status: 0, web3: null, accounts: null, contract: null, proposals: null, winner: null };\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // getting the events  \n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const proposalsEvt = await instance.getPastEvents('ProposalRegistered', options);\n\n      const owner = await instance.methods.owner().call();\n\n      const statusMap = new Map();\n      statusMap.set('0', 'Enregitrement des votants');\n      statusMap.set('1', 'Enregitrement des propositions');\n      statusMap.set('2', \"Fin de l'enregitrement des propositions\");\n      statusMap.set('3', 'Session de vote');\n      statusMap.set('4', 'Fin de la session de vote');\n      statusMap.set('5', 'RÃ©sultat de vote');\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ statusMap, owner, web3, accounts, contract: instance, proposals: proposalsEvt }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    const status = await contract.methods.workflowStatus().call(); \n    // Update state with the result.\n    this.setState({ status: status });\n    if (this.state.status == 5) {\n      this.updateWinner();\n    }\n   \n    // getting the events  \n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n    const proposalsEvt = await contract.getPastEvents('ProposalRegistered', options);\n\n    this.setState({ proposals:proposalsEvt });\n    \n  };\n\n  // Ajouter un Votant\n  addVoter = async () => {\n    const { accounts, contract} = this.state;\n    let voterAdress = document.getElementById(\"voterAdress\").value;\n    await contract.methods.addVoter(voterAdress).send({ from: accounts[0] });\n    document.getElementById(\"voterAdress\").value = \"\";\n  };\n\n  // Ajouter une propositions\n  addProposal = async () => {\n    const { accounts, contract} = this.state;\n    let proposalDescrition = document.getElementById(\"proposalDescrition\").value;\n    await contract.methods.addProposal(proposalDescrition).send({ from: accounts[0] });\n    document.getElementById(\"proposalDescrition\").value = \"\";\n  };\n\n  // Ajouter une propositions\n  setVote = async () => {\n      const { accounts, contract} = this.state;\n      //FIXME get the proposal checkedId\n      let proposalId = 1;\n      await contract.methods.setVote(proposalId).send({ from: accounts[0] });\n  };\n\n  // Comptabiliser les votes\n  tallyVotes = async () => {\n      const { accounts, contract} = this.state;\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n      this.updateStatus();\n      this.updateWinner();\n  };\n\n  updateStatus = async () => {\n    const { contract} = this.state;\n    const status = await contract.methods.workflowStatus().call();\n    // Update state with the result.\n    this.setState({ status: status });\n  }\n\n  updateWinner = async () => {\n    const {contract} = this.state;\n    \n      const winnerId = await contract.methods.winningProposalID().call();\n      console.log(winnerId);\n      try {\n        const winnerProposal = await contract.methods.getOneProposal(winnerId).call();\n        console.log(winnerProposal.description);\n        this.setState({ winner: '#' + winnerId + ' ' + winnerProposal.description });\n      } catch (error) {\n        this.setState({ winner: '' });\n      }\n    \n  }\n\n  // DÃ©marrer l'enregistrement des propositions\n  startProposalsRegistering = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n  \n  endProposalsRegistering = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  startVotingSession = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.startVotingSession().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  endVotingSession = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.endVotingSession().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const isOwner = () => {\n      console.log('owner: ' + this.state.owner);\n      console.log('account0: ' + this.state.accounts[0]);\n      return this.state.accounts[0] == this.state.owner;\n    }\n\n    let voterRegistration;\n    let endProposalsRegistering;\n    let startVotingSession;\n    let endVotingSession;\n    let tallyVotes;\n    let addProposal;\n\n    // Afficahge voterRegistration\n    if (isOwner() && this.state.status == 0) {\n      voterRegistration = \n      <div id=\"voter-reg\">\n        <div>\n          <h3>Ajouter un votant</h3>\n          Entrer l'adresse du votant<input type=\"text\" id=\"voterAdress\" />\n          <button onClick={this.addVoter}>Valider</button>\n        </div>\n        <br/>\n        <div><button onClick={this.startProposalsRegistering}> DÃ©marrer l'enregitrement des Propositions</button></div> \n      </div>;\n    }\n\n    // affichage Enregistrer une Proposition\n    if (this.state.status == 1) {\n      addProposal = \n      <div>\n        <h3>Enregistrer une Proposition</h3>\n        Entrer la Proposition<input type=\"text\" id=\"proposalDescrition\" />\n        <button onClick={this.addProposal}>Valider</button>\n      </div>\n    }\n\n    if ( isOwner() ) {\n      \n\n      endProposalsRegistering = <div><button onClick={this.endProposalsRegistering}> ArrÃªter l'enregitrement des Propositions</button></div> ;\n\n      startVotingSession = <div><button onClick={this.startVotingSession}> DÃ©marrer la session de vote</button></div> ;\n\n      endVotingSession = <div><button onClick={this.endVotingSession}> ArrÃªter la session de vote</button></div> ;\n\n      tallyVotes = <div><button onClick={this.tallyVotes}> Comptabiliser les votes</button></div> ;\n    } \n\n\n\n    return (\n      <div className=\"App\">\n        \n        <h2>SystÃ¨me de  Vote</h2>\n        \n        <p>Utilisateur: {this.state.accounts[0]}</p>\n        \n        <div>Etape: {this.state.statusMap.get(this.state.status)}</div>\n       \n       {voterRegistration}\n        \n       {addProposal}\n        <br />\n       {endProposalsRegistering}\n        <br />\n        {startVotingSession}\n\n        <div>\n          <h3>Voter une proposition</h3>\n          {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <ul>\n              { this.state.proposals.map( (proposal, index) => (\n                <div key={index}>\n                  <span>{'#' + index + '  ' + proposal.returnValues.proposalDescription}</span>\n\n                  <input value={index} type=\"checkbox\" />\n                </div>\n               ) ) }\n            </ul>\n         }\n          <button onClick={this.setVote}>Voter</button>\n        </div>\n        \n        <br />\n        {endVotingSession}\n\n        <div>\n\n        <br />\n        {tallyVotes}\n        <br/>\n        <div><span>Le gagnant est: {this.state.winner}</span></div>\n        </div>\n  \n\n        {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <ul>\n              { this.state.proposals.map( (proposal) => ( <li>{proposal.returnValues.proposalDescription}</li> ) ) }\n            </ul>\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}