{"ast":null,"code":"var _jsxFileName = \"/Users/Hoby/workspace/alyra-blockchain-projects/systeme-de-vote/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      status: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      proposals: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(VotingContract.abi, deployedNetwork && deployedNetwork.address); // getting the events  \n\n        let options = {\n          fromBlock: 0,\n          //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const proposalsEvt = await instance.getPastEvents('ProposalRegistered', options); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance,\n          proposals: proposalsEvt\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n      // await contract.methods.set(10).send({ from: accounts[0] });\n      // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n\n      const response = await contract.methods.workflowStatus().call(); // Update state with the result.\n\n      this.setState({\n        status: response\n      }); //await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n      // getting the events  \n\n      let options = {\n        fromBlock: 0,\n        //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const proposalsEvt = await contract.getPastEvents('ProposalRegistered', options);\n      this.setState({\n        proposals: proposalsEvt\n      });\n    };\n\n    this.addVoter = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract;\n      let voterAdress = document.getElementById(\"voterAdress\").value;\n      await contract.methods.addVoter(voterAdress).send({\n        from: accounts[0]\n      });\n    };\n\n    this.addProposal = async () => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract;\n      let proposalDescrition = document.getElementById(\"proposalDescrition\").value;\n      await contract.methods.addProposal(proposalDescrition).send({\n        from: accounts[0]\n      });\n    };\n\n    this.setVote = async () => {\n      const _this$state4 = this.state,\n            accounts = _this$state4.accounts,\n            contract = _this$state4.contract; //FIXME get the proposal checkedId\n\n      let proposalId = 1;\n      await contract.methods.setVote(proposalId).send({\n        from: accounts[0]\n      });\n    };\n\n    this.tallyVotes = async () => {\n      const _this$state5 = this.state,\n            accounts = _this$state5.accounts,\n            contract = _this$state5.contract;\n      await contract.methods.tallyVotes().send({\n        from: accounts[0]\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"adresse: \", this.state.accounts[0]), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"WorkflowStatus: \", this.state.status), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Ajouter un votant\"), \"Entrer l'adresse du votant\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"voterAdress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.addVoter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Valider\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Enregistrer une Proposition\"), \"Entrer la Proposition\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"proposalDescrition\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.addProposal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Valider\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Voter une proposition\"), this.state.proposals == null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Pas de propositions\") : React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.proposals.map((proposal, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, '#' + index + '  ' + proposal.returnValues.proposalDescription), React.createElement(\"input\", {\n      value: index,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })))), React.createElement(\"button\", {\n      onClick: this.setVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Voter\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Comptabiliser les votes\"), React.createElement(\"button\", {\n      onClick: this.tallyVotes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Valider\")), this.state.proposals == null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Pas de propositions\") : React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.proposals.map(proposal => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, proposal.returnValues.proposalDescription))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Hoby/workspace/alyra-blockchain-projects/systeme-de-vote/client/src/App.js"],"names":["React","Component","SimpleStorageContract","VotingContract","getWeb3","App","state","status","web3","accounts","contract","proposals","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","options","fromBlock","toBlock","proposalsEvt","getPastEvents","setState","runExample","error","alert","console","response","methods","workflowStatus","call","addVoter","voterAdress","document","getElementById","value","send","from","addProposal","proposalDescrition","setVote","proposalId","tallyVotes","render","map","proposal","index","returnValues","proposalDescription"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { status: 0, web3: null, accounts: null, contract: null, proposals: null };\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // getting the events  \n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const proposalsEvt = await instance.getPastEvents('ProposalRegistered', options);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, proposals: proposalsEvt }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    // await contract.methods.set(10).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    const response = await contract.methods.workflowStatus().call();\n    // Update state with the result.\n    this.setState({ status: response });\n\n    //await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n\n    // getting the events  \n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n    const proposalsEvt = await contract.getPastEvents('ProposalRegistered', options);\n\n    this.setState({ proposals:proposalsEvt });\n    \n  };\n\n  // Ajouter un Votant\n  addVoter = async () => {\n    const { accounts, contract} = this.state;\n    let voterAdress = document.getElementById(\"voterAdress\").value;\n    await contract.methods.addVoter(voterAdress).send({ from: accounts[0] });\n  };\n\n  // Ajouter une propositions\n  addProposal = async () => {\n    const { accounts, contract} = this.state;\n    let proposalDescrition = document.getElementById(\"proposalDescrition\").value;\n    await contract.methods.addProposal(proposalDescrition).send({ from: accounts[0] });\n  };\n\n  // Ajouter une propositions\n  setVote = async () => {\n      const { accounts, contract} = this.state;\n      //FIXME get the proposal checkedId\n      let proposalId = 1;\n      await contract.methods.setVote(proposalId).send({ from: accounts[0] });\n  };\n\n  // Comptabiliser les votes\n  tallyVotes = async () => {\n      const { accounts, contract} = this.state;\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        \n        <p>adresse: {this.state.accounts[0]}</p>\n        \n        <div>WorkflowStatus: {this.state.status}</div>\n\n        <div>\n          <h3>Ajouter un votant</h3>\n          Entrer l'adresse du votant<input type=\"text\" id=\"voterAdress\" />\n          <button onClick={this.addVoter}>Valider</button>\n        </div>\n\n        <div>\n          <h3>Enregistrer une Proposition</h3>\n          Entrer la Proposition<input type=\"text\" id=\"proposalDescrition\" />\n          <button onClick={this.addProposal}>Valider</button>\n        </div>\n\n        <div>\n          <h3>Voter une proposition</h3>\n          {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <ul>\n              { this.state.proposals.map( (proposal, index) => (\n                <div key={index}>\n                  <span>{'#' + index + '  ' + proposal.returnValues.proposalDescription}</span>\n\n                  <input value={index} type=\"checkbox\" />\n                </div>\n               ) ) }\n            </ul>\n         }\n          <button onClick={this.setVote}>Voter</button>\n        </div>\n\n        <div>\n          <h3>Comptabiliser les votes</h3>\n          \n          <button onClick={this.tallyVotes}>Valider</button>\n        </div>\n\n        {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <ul>\n              { this.state.proposals.map( (proposal) => ( <li>{proposal.returnValues.proposalDescription}</li> ) ) }\n            </ul>\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}