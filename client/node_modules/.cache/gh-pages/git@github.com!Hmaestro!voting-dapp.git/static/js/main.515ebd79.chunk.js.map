{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","statusMap","owner","status","accounts","contract","proposals","winner","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","getPastEvents","proposalsEvt","methods","call","Map","set","setState","runExample","alert","error","workflowStatus","updateWinner","p","map","proposal","i","selected","index","addVoter","voterAdress","document","getElementById","value","send","from","addProposal","proposalDescrition","setVote","pSelected","findIndex","item","tallyVotes","updateStatus","winningProposalID","winnerId","getOneProposal","winnerProposal","description","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","this","voterRegistration","votingSession","result","isOwner","id","type","onClick","style","display","justifyContent","alignItems","paddingBottom","key","textAlign","returnValues","proposalDescription","checked","onChange","e","c","target","prop","className","get","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.515ebd79.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { statusMap: null, owner: null, status: 0, web3: null, accounts: null, contract: null, proposals: null, winner: null };\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // getting the events  \n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const proposalsEvt = await instance.getPastEvents('ProposalRegistered', options);\n\n      const owner = await instance.methods.owner().call();\n\n      const statusMap = new Map();\n      statusMap.set('0', 'Enregitrement des votants');\n      statusMap.set('1', 'Enregitrement des propositions');\n      statusMap.set('2', \"Fin de l'enregitrement des propositions\");\n      statusMap.set('3', 'Session de vote');\n      statusMap.set('4', 'Fin de la session de vote');\n      statusMap.set('5', 'Résultat de vote');\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n\n      this.setState({ statusMap, owner, web3, accounts, contract: instance, proposals: proposalsEvt }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    const status = await contract.methods.workflowStatus().call(); \n    // Update state with the result.\n    this.setState({ status: status });\n    if (this.state.status == 5) {\n      this.updateWinner();\n    }\n   \n    // getting the events  \n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n    const proposalsEvt = await contract.getPastEvents('ProposalRegistered', options);\n\n    const p = proposalsEvt.map( (proposal, i) => {\n      proposal.selected = false;\n      proposal.index = i;\n      return proposal;\n    });\n    this.setState({ proposals:p });\n    \n  };\n\n  // Ajouter un Votant\n  addVoter = async () => {\n    const { accounts, contract} = this.state;\n    let voterAdress = document.getElementById(\"voterAdress\").value;\n    await contract.methods.addVoter(voterAdress).send({ from: accounts[0] });\n    document.getElementById(\"voterAdress\").value = \"\";\n  };\n\n  // Ajouter une propositions\n  addProposal = async () => {\n    const { accounts, contract} = this.state;\n    let proposalDescrition = document.getElementById(\"proposalDescrition\").value;\n    await contract.methods.addProposal(proposalDescrition).send({ from: accounts[0] });\n    document.getElementById(\"proposalDescrition\").value = \"\";\n  };\n\n  // Ajouter une propositions\n  setVote = async () => {\n      const { accounts, contract, proposals } = this.state;\n      //FIXME get the proposal checkedId\n      const pSelected = proposals.findIndex(item => item.selected);\n      console.log('pSelected ', pSelected);\n     \n      await contract.methods.setVote(pSelected).send({ from: accounts[0] });\n  };\n\n  // Comptabiliser les votes\n  tallyVotes = async () => {\n      const { accounts, contract} = this.state;\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n      this.updateStatus();\n      this.updateWinner();\n  };\n\n  updateStatus = async () => {\n    const { contract} = this.state;\n    const status = await contract.methods.workflowStatus().call();\n    // Update state with the result.\n    this.setState({ status: status });\n  }\n\n  updateWinner = async () => {\n    const {contract} = this.state;\n    \n      const winnerId = await contract.methods.winningProposalID().call();\n      console.log(winnerId);\n      try {\n        const winnerProposal = await contract.methods.getOneProposal(winnerId).call();\n        console.log(winnerProposal.description);\n        this.setState({ winner: '#' + winnerId + ' ' + winnerProposal.description });\n      } catch (error) {\n        this.setState({ winner: '' });\n      }\n    \n  }\n\n  // Démarrer l'enregistrement des propositions\n  startProposalsRegistering = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n  \n  endProposalsRegistering = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  startVotingSession = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.startVotingSession().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  endVotingSession = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.endVotingSession().send({ from: accounts[0] });\n    this.updateStatus();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const isOwner = () => {\n      console.log('owner: ' + this.state.owner);\n      console.log('account0: ' + this.state.accounts[0]);\n      return this.state.accounts[0] == this.state.owner;\n    }\n\n    let voterRegistration;\n    let endProposalsRegistering;\n    let startVotingSession;\n    let endVotingSession;\n    let tallyVotes;\n    let addProposal;\n    let votingSession;\n    let result;\n\n    // Afficahge voterRegistration\n    if ( this.state.status == 0 && isOwner() ) {\n      voterRegistration = \n      <div id=\"voter-reg\">\n        <div>\n          <h3>Ajouter un votant</h3>\n          Entrer l'adresse du votant<input type=\"text\" id=\"voterAdress\" />\n          <button onClick={this.addVoter}>Valider</button>\n        </div>\n        <br/>\n        <div><button onClick={this.startProposalsRegistering}> Démarrer l'enregitrement des Propositions</button></div> \n      </div>;\n    }\n\n    // affichage Enregistrer une Proposition\n    if (this.state.status == 1) {\n      addProposal = \n      <div>\n        <h3>Enregistrer une Proposition</h3>\n        Entrer la Proposition<input type=\"text\" id=\"proposalDescrition\" />\n        <button onClick={this.addProposal}>Valider</button>\n      </div>\n      \n      if (isOwner()) {\n        endProposalsRegistering = <div><button onClick={this.endProposalsRegistering}> Arrêter l'enregitrement des Propositions</button></div> ;\n      }\n    }\n\n    // Afficher bouton startVotingSession\n    if (this.state.status == 2 ) {\n      if (isOwner()) {\n        startVotingSession = \n        <div>        \n        <div>Liste des propositions</div>\n        {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n              <table style={{paddingBottom: '20px'}}>\n              { this.state.proposals.map( (proposal, index) => (\n                <tr key={proposal.index}>\n                  <td>{'#' + proposal.index}</td>  <td style={{textAlign: 'left'}}>{proposal.returnValues.proposalDescription}</td>\n                </tr>\n              ) ) }\n            </table></div>\n        }\n        <div><button onClick={this.startVotingSession}> Démarrer la session de vote</button></div> \n        </div>\n      } else {\n        startVotingSession =\n        <div>\n        <div>Liste des propositions</div>\n        {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n              <table style={{paddingBottom: '20px'}}>\n              { this.state.proposals.map( (proposal, index) => (\n                <tr key={proposal.index}>\n                  <td>{'#' + proposal.index}</td>  <td style={{textAlign: 'left'}}>{proposal.returnValues.proposalDescription}</td>\n                </tr>\n              ) ) }\n            </table></div>\n        }\n        \n        </div>\n        \n      }\n      \n    } \n\n    // Afficher session de vote\n    if (this.state.status == 3 ) {\n      votingSession = \n        <div>\n        <h3>Voter une proposition</h3>\n        {\n          this.state.proposals == null ? <p>Pas de propositions</p> : \n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n              <table style={{paddingBottom: '20px'}}>\n              { this.state.proposals.map( (proposal, index) => (\n                <tr key={proposal.index}>\n                  <td>{'#' + proposal.index}</td>  <td style={{textAlign: 'left'}}>{proposal.returnValues.proposalDescription}</td>\n\n                  <td><input checked={proposal.selected} value={index} type=\"checkbox\" \n                    onChange={(e) => {\n                      const c = e.target.checked;\n                      const prop = this.state.proposals.map( (item) => {\n                        \n                        if (item.index === proposal.index) \n                          item.selected = c\n                        else\n                          item.selected = false;\n                        return item;\n                      });\n                      console.log(c);\n                      console.log(prop);\n                      this.setState({ proposals:prop });\n                    }\n                      } /></td>\n                </tr>\n              ) ) }\n            </table></div>\n        }\n        <button onClick={this.setVote}>Voter</button>\n        </div>\n\n      if ( isOwner() ) {\n        endVotingSession = <div><button onClick={this.endVotingSession}> Arrêter la session de vote</button></div> ;\n      } \n    } \n\n    if ( this.state.status == 4 ) {\n      \n      if (isOwner())\n        tallyVotes = <div> <div>Attente de résultat</div><br /><button onClick={this.tallyVotes}> Comptabiliser les votes</button></div> ;\n      else\n      tallyVotes = <div>Attente de résultat</div>\n    } \n\n    if ( this.state.status == 5 ) {\n      result = <div><span>Le gagnant est: {this.state.winner}</span></div> ;\n    } \n\n    return (\n      <div className=\"App\">\n        \n        <h2>Système de  Vote</h2>\n        \n        <p>Utilisateur: {this.state.accounts[0]}</p>\n        \n        <div>Etape: {this.state.statusMap.get(this.state.status)}</div>\n       \n       {voterRegistration}\n        \n       {addProposal}\n        <br />\n       {endProposalsRegistering}\n        <br />\n        {startVotingSession}\n\n        {votingSession}\n        <br />\n        {endVotingSession}\n\n        <div>\n\n        <br />\n        {tallyVotes}\n        <br/>\n        {result}\n        </div>\n  \n\n       \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}